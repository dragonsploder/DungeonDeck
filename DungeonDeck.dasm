
	processor 6502
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Macros
bg_color = $84
sprite_height = $07
sprite_y = $40
sprite_x = $80
sprite = $00

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Variables segment

        seg.u variables
	org $80
temp	byte
temp2 	byte
card1s	byte
card1t	byte
card1n  byte

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Code segment

	seg code
        org $f000

init
	cld 		; clear decimal mode flag
        sei		; set interrupt disable flag
        ldx #$FF	
        txs		; set stack pointer to $FF
        
        lda #0		; zero out zero page
        ldx #$FF
zero_zp
	sta $0,X
        dex
        bne zero_zp
	
        
        lda #sprite
        sta card1s
        
        
fill_cards
	lda card1s
        lsr
        lsr
        lsr
        lsr
        jsr mult7
	sta card1t
        
        lda card1s
        and #$0F
        jsr mult7
	sta card1n

        ;and #$F0
	;lda #$00
        ;sta card1t
        ;lda #$0e
        ;sta card1n

new_frame
        ;lsr SWCHB	; test Game Reset switch
        ;bcc init	; reset?
        
        VERTICAL_SYNC
        
        TIMER_SETUP 37
        
        lda #sprite_x
        ldx #$0
        jsr sethorizpos
        sta WSYNC	; sync w/ scanline
        sta HMOVE	; apply fine offsets
        
        
      	TIMER_WAIT
        
        
        lda #$00
        sta VBLANK	; turn off VBLANK
        
        ldy #bg_color   ; load bg color
	sty COLUBK	; set bg color
        
        TIMER_SETUP 100
        TIMER_WAIT
        
        
        ldx #$07
sprite_loop
	dex

	txa
	sta temp
        clc
	adc card1t
        tay
        lda icon_types,y
        sta temp2
        lda temp
        clc
        adc card1n
        tay
        lda temp2
        ora icon_numbers,y
        sta WSYNC	; wait for next scanline
        sta GRP0

        lda #$F
        sta COLUP0
        
        cpx #$00
        bne sprite_loop
        

        lda #$00
        sta WSYNC
        sta GRP0
        
        
        TIMER_SETUP 84
        TIMER_WAIT
        
        
;        ldx #192	; count 192 scanlines
;lvscan  
;        txa
;        sec
;        sbc #sprite_y
;        cmp #sprite_height
;        bcc insprite
;        lda #$00
;	jmp outsprite
;insprite
;	sta temp
;	adc card1t
;       tay
;       lda icon_types,y
;        sta temp2
;        lda temp
;        adc card1n
;        tay
;        lda temp2
;        ora icon_numbers,y
;outsprite:
;        sta WSYNC	; wait for next scanline
;        sta GRP0
;
;        lda #$F
;        sta COLUP0
;        
;	dex
;        bne lvscan

	
	lda #2		
        sta VBLANK	; turn on VBLANK
        
        
	TIMER_SETUP 30
        TIMER_WAIT

        jmp new_frame


        


; sethorizpos routine
; A = X coordinate
; X = player number (0 or 1)
sethorizpos
	sta WSYNC	; start a new line
	sec		; set carry flag
divideloop
	sbc #15		; subtract 15
	bcs divideloop	; branch until negative
	eor #7		; calculate fine offset
	asl
	asl
	asl
	asl
	sta RESP0,x	; fix coarse position
	sta HMP0,x	; set fine offset
	rts		; return to caller
        
; mult7
; A = Times to multiplly, will have results
mult7
	tax
        lda #$00
        cpx #$00
        bne mult7_loop
        rts
mult7_loop
	clc
	adc #$07
        dex
        bne mult7_loop
        rts
        
        
; icons

icon_types
icon_sword
	.byte #%01000000 
        .byte #%01000000
        .byte #%11100000
        .byte #%01000000
        .byte #%01000000
        .byte #%01000000
        .byte #%01000000
icon_potion
	.byte #%11100000 
        .byte #%10100000
        .byte #%10100000
        .byte #%10100000
        .byte #%11100000
        .byte #%01000000
        .byte #%01000000
icon_sheild
	.byte #%01000000 
        .byte #%00000000
        .byte #%10100000
        .byte #%10100000
        .byte #%10100000
        .byte #%00000000
        .byte #%01000000
        
        
        
        
icon_numbers
icon_zero
	.byte #%00000111
        .byte #%00000101
        .byte #%00000101
        .byte #%00000101
        .byte #%00000101
        .byte #%00000101
        .byte #%00000111
icon_one
	.byte #%00000100
        .byte #%00000100
        .byte #%00000100
        .byte #%00000100
        .byte #%00000100
        .byte #%00000100
        .byte #%00000100
icon_two
	.byte #%00000111
        .byte #%00000100
        .byte #%00000100
        .byte #%00000111
        .byte #%00000001
        .byte #%00000001
        .byte #%00000111   
icon_three
	.byte #%00000111
        .byte #%00000001
        .byte #%00000001
        .byte #%00000111
        .byte #%00000001
        .byte #%00000001
        .byte #%00000111
icon_four
	.byte #%00000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000111
        .byte #%00000101
        .byte #%00000101
        .byte #%00000101
icon_five
	.byte #%00000111
        .byte #%00000001
        .byte #%00000001
        .byte #%00000111
        .byte #%00000100
        .byte #%00000100
        .byte #%00000111
icon_six
	.byte #%00000111
        .byte #%00000101
        .byte #%00000101
        .byte #%00000111
        .byte #%00000100
        .byte #%00000100
        .byte #%00000100
icon_seven
	.byte #%00000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000111
icon_eight
	.byte #%00000111
        .byte #%00000101
        .byte #%00000101
        .byte #%00000111
        .byte #%00000101
        .byte #%00000101
        .byte #%00000111
icon_nine
	.byte #%00000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000111
        .byte #%00000101
        .byte #%00000101
        .byte #%00000111

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Epilogue

	org $FFFC
        .word init	; reset vector
        .word init	; BRK vector

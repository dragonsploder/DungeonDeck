; Boilerplate
	processor 6502
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"
        
; Defines
bg_color 	= $84
sprite_height 	= $07
sprite_y 	= $40
sprite_x 	= $52
sprite 		= $14
cards_len 	= $08

deck_len	= 36

; Var
        seg.u variables
	org $80
        
; Temporary storage
temp		byte
temp2 		byte
temp3 		byte
temp4		byte

; Card data
cards		ds 8
cardindxt 	ds 8
cardindxn 	ds 8
cardasprite 	ds 7
cardbsprite 	ds 7

; Deck
deckindex	byte
deck		ds deck_len


; Random Num Stuff
seed		ds 2

; Code 
	seg code
        org $F000

init
	CLEAN_START
  	
        ; Set seed
        lda #$75
        sta seed
        lda #$05
        sta seed+1
        
        jsr fill_deck
        jsr shuffle_deck
	
        ; Fill cards with data
        lda deck+0
        sta cards+0
        lda deck+1
        sta cards+1
        lda deck+2
        sta cards+2
        lda deck+3
        sta cards+3
        
        
        ; Setup Player
        lda #$49
        sta cards+4
        lda #$5A
        sta cards+5
        lda #$6A
        sta cards+6
        lda #$7A
        sta cards+7

new_frame
        lsr SWCHB	; test Game Reset switch
        bcc init	; reset?
        
        VERTICAL_SYNC
        
        
        TIMER_SETUP 37  ; Vblank
        
        
        sta WSYNC	; Set sprite A position
        SLEEP 40	
        lda #$c0
        sta RESP0
        sta HMP0
        sta WSYNC
        sta HMOVE
        
        
      	TIMER_WAIT	; End Vblank
        
        
        lda #$00
        sta VBLANK	; turn off VBLANK
        
        ldy #bg_color   ; load bg color
	sty COLUBK	; set bg color
        
        
        
        TIMER_SETUP 30  ; 30 scanlines before first card
        
        lda #$00
        jsr fill_card_a	; Fill A sprite with card 0 data
        
        TIMER_WAIT	; End 30 scanlines
        
	jsr print_card_a	; Print card 0
        			; Takes 8 scanlines
                                
        TIMER_SETUP 14	; 14 scanlines spacing
        
        lda #$01
        jsr fill_card_a ; Fill A sprite with card 1 data
        
        lda #$02
        jsr fill_card_b ; Fill B sprite with card 2 data
        

        sta WSYNC	; Set card 1&2 position
        SLEEP 40
        lda #$00
        sta RESP0
        sta HMP0
        lda #$00
        sta RESP1
        sta HMP1
        sta WSYNC
        SLEEP 70
        sta HMOVE
	
        
        TIMER_WAIT	; End 14 scanlines
        
	jsr print_card_ab	; Printcard 1&2
        			; Takes 8 scanlines
        
        TIMER_SETUP 14	; 14 scanlines spacing
        
        
        lda #$03
        jsr fill_card_a	; Fill A sprite with card 3 data
        
        sta WSYNC	; Set card 3 position
        SLEEP 43
        lda #$d0
        sta RESP0
        sta HMP0
        sta WSYNC
        SLEEP 70
        sta HMOVE
        
        TIMER_WAIT	; End 14 scanlines
        
	jsr print_card_a	; Print card 3
        			; Takes 8 scanlines
        
        
        TIMER_SETUP 29	; 29 scanlines spacing
        
        lda #$04
        jsr fill_card_a	; Fill A sprite with card 4 data
        
        
        TIMER_WAIT	; End 29 scanlines
        
	jsr print_card_a	; Print card 4
        			; Takes 8 scanlines
        
        
        TIMER_SETUP 14 	; 14 scanlines spacing
        
        lda #$05
        jsr fill_card_a	; Fill Sprite A with card 5 data
        lda #$06
        jsr fill_card_b ; Fill Sprite B with card 6 data
        
        sta WSYNC	; Set card 5&6 position
        SLEEP 40
        lda #$00
        sta RESP0
        sta HMP0
        lda #$00
        sta RESP1
        sta HMP1
        sta WSYNC
        SLEEP 70
        sta HMOVE
        
        	
        TIMER_WAIT	; End 14 scanlines
        
	jsr print_card_ab	; Print card 5&6
        
        TIMER_SETUP 14	; 14 scanlines spacing
        
        lda #$07
        jsr fill_card_a	; Fill Sprite A with card 7 data
        
        sta WSYNC	; Set card 7 position
        SLEEP 43
        lda #$d0
        sta RESP0
        sta HMP0
        sta WSYNC
        SLEEP 70
        sta HMOVE
        
        TIMER_WAIT	; End 14 scanlines
        
        jsr print_card_a
        
        TIMER_SETUP 29	; 29 scanlines spacing
        TIMER_WAIT	; End 29 scanlines

	
	lda #2		
        sta VBLANK	; turn on VBLANK
        
        
	TIMER_SETUP 30	; Vblank
        
        jsr fill_cards	; Setup card indexes
        
        TIMER_WAIT	; End Vblank

        jmp new_frame

; fillcard_a
; A = card index
; Fills cardasprite with the card index
fill_card_a
	sta temp3
        ldx #$07
fill_card_a_loop	; Loop over the 7 lines in the sprite
	dex

	txa
	sta temp
        clc
        ldy temp3	; Add current scanline to index
	adc cardindxt,y
        tay
        lda icon_types,y	; Get type bitmap
        sta temp2
        lda temp
        ldy temp3
        clc
        adc cardindxn,y
        tay
        lda temp2
        ora icon_numbers,y	; Combinde type and number bitmap
        sta cardasprite,x	; Store in current sprite
        
        cpx #$00
        bne fill_card_a_loop
        rts

; fillcard_b
; A = card index number
; Fills cardbsprite with the card index
fill_card_b
	sta temp3
        ldx #$07	
fill_card_b_loop	; Loop over the 7 lines in the sprite
	dex

	txa
	sta temp
        clc
        ldy temp3	; Add current scanline to index
	adc cardindxt,y
        tay
        lda icon_types,y	; Get type bitmap
        sta temp2
        lda temp
        ldy temp3
        clc
        adc cardindxn,y	
        tay
        lda temp2
        ora icon_numbers,y	; Combinde type and number bitmap
        sta cardbsprite,x	; Store in current sprite
        
        cpx #$00
        bne fill_card_b_loop
        rts
  
; print_card_a
; print cardasprite to screen
print_card_a
        ldx #$07		; 7 scanlines
sprite_loop_a
	dex
	lda cardasprite,x	; Load A sprite data
        sta WSYNC	
        sta GRP0		; Write to sprite register

        lda #$F
        sta COLUP0		; Set color
        
        cpx #$00
        bne sprite_loop_a
        

        lda #$00
        sta WSYNC	
        sta GRP0		; Clear sprite register
        rts

; print_card_ab
; print cardasprite and cardbsprite to screen
print_card_ab
        ldx #$07	
sprite_loop_ab			; 7 scanlines
	dex
	lda cardasprite,x	; Load A sprite data
        ldy cardbsprite,x	; Load B sprite data
        sta WSYNC
        sta GRP0		; Write to sprite registers
        sty GRP1

        lda #$F
        sta COLUP0		; Set colors
        sta COLUP1
        
        cpx #$00
        bne sprite_loop_ab
        

        lda #$00
        sta WSYNC
        sta GRP0		; Clear sprite data
        sta GRP1
        rts
        
; mult7
; A = A * 7
mult7
	tax
        lda #$00
        cpx #$00
        bne m7_loop
        rts
m7_loop
	clc
	adc #$07
        dex
        bne m7_loop
        rts
        
; fill_cards
; Converts cards array to cardinxt and cardinxn
fill_cards
	ldx #cards_len	; 8 cards
fc_loop
	dex
	lda cards,x	; Load card index
        lsr		; Get high 4 bites
        lsr
        lsr
        lsr
        stx temp
        jsr mult7	; Each sprite is 7 bytes
        ldx temp	; so multiply each index by 7
	sta cardindxt,x	; Store actual offset for type

        lda cards,x
        and #$0F	; Get the low 4 bites
        stx temp
        jsr mult7	; See above
        ldx temp
	sta cardindxn,x	; Store actual offset for number
        cpx #$00
        bne fc_loop
        rts
        
; fill_deck
; Copy preset deck to memory
fill_deck
	ldx #deck_len
fd_loop
	dex
	lda deck_start_layout,x
        sta deck,x
        cpx #$00
        bne fd_loop
        
        rts
        
; shuffle_deck
; Shuffles the values in our deck around
; Very slow, but very simple
shuffle_deck
	ldx #$FF	; Loop 255 times
sd_loop
	txa
        pha
	;stx temp3
        
	jsr rand
        ldx #deck_len
        jsr modulo	; Offset one
        pha		

        jsr rand
        ldx #deck_len
        jsr modulo	; Offset two
        tay 
        lda deck,y	; Load card at offset two
        sta temp
        
        pla 
        tax 
        lda deck,x	; Load card at offset one
        pha
        lda temp	; Load card two
        sta deck,x	; Store card two at offset one
        pla
        sta deck,y	; Store card one at offset two
        
        pla
        tax
        dex
        bne sd_loop
        rts
        
; mod
; A = A % X
modulo
	stx temp
m_loop
	cmp temp
        bcc m_end
        sbc temp
        jmp m_loop
m_end
	rts

; Rand
; Return and step the seed
; A = random number
; https://github.com/bbbradsmith/prng_6502/blob/master/galois16.s
rand
	ldy #8
	lda seed+0
r_loop
	asl        ; shift the register
	rol seed+1
	bcc r_skip
	eor #$39   ; apply XOR feedback whenever a 1 bit is shifted out
r_skip
	dey
	bne r_loop
	sta seed+0
	cmp #0     ; reload flags
	rts
        
; icons
icon_types
icon_sword
	.byte #%01000000 
        .byte #%01000000
        .byte #%11100000
        .byte #%01000000
        .byte #%01000000
        .byte #%01000000
        .byte #%01000000
icon_potion
	.byte #%11100000 
        .byte #%10100000
        .byte #%10100000
        .byte #%10100000
        .byte #%11100000
        .byte #%01000000
        .byte #%01000000
icon_sheild
	.byte #%01000000 
        .byte #%00000000
        .byte #%10100000
        .byte #%10100000
        .byte #%10100000
        .byte #%00000000
        .byte #%01000000
icon_enemy
	.byte #%10100000 
        .byte #%10100000
        .byte #%11100000
        .byte #%01000000
        .byte #%00000000
        .byte #%10100000
        .byte #%10100000
icon_player
	.byte #%01000000 
        .byte #%10100000
        .byte #%01000000
        .byte #%10100000
        .byte #%01000000
        .byte #%10100000
        .byte #%01000000
icon_left
	.byte #%11100000 
        .byte #%11100000
        .byte #%10000000
        .byte #%10000000
        .byte #%10000000
        .byte #%10000000
        .byte #%10000000 
icon_right
	.byte #%10100000 
        .byte #%10100000
        .byte #%11000000
        .byte #%11000000
        .byte #%10100000
        .byte #%10100000
        .byte #%11000000
icon_backpack
	.byte #%11000000 
        .byte #%10100000
        .byte #%10100000
        .byte #%11000000
        .byte #%10100000
        .byte #%10100000
        .byte #%11000000
icon_blank
	.byte #%00000000 
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000

        
icon_numbers
icon_zero
	.byte #%00000111
        .byte #%00000101
        .byte #%00000101
        .byte #%00000101
        .byte #%00000101
        .byte #%00000101
        .byte #%00000111
icon_one
	.byte #%0000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000001
icon_two
	.byte #%00000111
        .byte #%00000100
        .byte #%00000100
        .byte #%00000111
        .byte #%00000001
        .byte #%00000001
        .byte #%00000111   
icon_three
	.byte #%00000111
        .byte #%00000001
        .byte #%00000001
        .byte #%00000111
        .byte #%00000001
        .byte #%00000001
        .byte #%00000111
icon_four
	.byte #%00000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000111
        .byte #%00000101
        .byte #%00000101
        .byte #%00000101
icon_five
	.byte #%00000111
        .byte #%00000001
        .byte #%00000001
        .byte #%00000111
        .byte #%00000100
        .byte #%00000100
        .byte #%00000111
icon_six
	.byte #%00000111
        .byte #%00000101
        .byte #%00000101
        .byte #%00000111
        .byte #%00000100
        .byte #%00000100
        .byte #%00000100
icon_seven
	.byte #%00000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000111
icon_eight
	.byte #%00000111
        .byte #%00000101
        .byte #%00000101
        .byte #%00000111
        .byte #%00000101
        .byte #%00000101
        .byte #%00000111
icon_nine
	.byte #%00000001
        .byte #%00000001
        .byte #%00000001
        .byte #%00000111
        .byte #%00000101
        .byte #%00000101
        .byte #%00000111
icon_x
	.byte #%00000101
        .byte #%00000101
        .byte #%00000010
        .byte #%00000010
        .byte #%00000010
        .byte #%00000101
        .byte #%00000101
icon_blank2
	.byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        .byte #%00000000
        
deck_start_layout
	HEX 01 02 03 04 05 06 07 08 09
        HEX 11 12 13 14 15 16 17 18 19
        HEX 21 22 23 24 25 26 27 28 29
        HEX 31 32 33 34 35 36 37 38 39
     
     
; Vectors
	org $FFFC
        .word init	; reset vector
        .word init	; BRK vector
